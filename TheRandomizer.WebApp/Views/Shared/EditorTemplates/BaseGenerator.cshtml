@model TheRandomizer.Generators.BaseGenerator
@using TheRandomizer.Generators

<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                <a href="#" data-toggle="collapse" data-target="#Information" style="color: black;"><b class="panel-title">Information</b></a>
            </div>
            <div class="panel-body panel-collapse collapse in" id="Information">
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label text-left col-md-4" })
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.Name, htmlAttributes: new { @class = "form-control", @title = "The unique name of the generator." })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label text-left col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control", @title = "The name or username of the author of the generator." } })
                        @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label text-left col-md-4" })
                    <div class="col-md-8">
                        @Html.TextAreaFor(model => model.Description, htmlAttributes: new { @class = "form-control", @title = "A brief description of what the generator does." })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TagList, htmlAttributes: new { @class = "control-label text-left col-md-4" })
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.TagList, htmlAttributes: new { @class = "form-control", @title = "A comma separated list of tags for the generator" })
                        @Html.ValidationMessageFor(model => model.TagList, "", new { @class = "text-danger" })

                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.OutputFormat, htmlAttributes: new { @class = "control-label text-left col-md-4" })
                    <div class="col-md-8">
                        @Html.EnumDropDownListFor(model => model.OutputFormat, htmlAttributes: new { @class = "form-control", @title = "The type of output expected by the generator." })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Url, htmlAttributes: new { @class = "control-label text-left col-md-4" })
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.Url, htmlAttributes: new { @class = "form-control", @type = "url", @title = "An optional url to present to users of the generator" })
                        @Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" id="divSupportsMaxLength">
                    @Html.LabelFor(model => model.SupportsMaxLength, htmlAttributes: new { @class = "control-label text-left col-md-4" })
                    <div class="col-md-8">
                        @Html.CheckBoxFor(model => model.SupportsMaxLength, htmlAttributes: new { @data_toggle = "toggle", @data_on = "Yes", @data_off = "No", @class = "btn btn-default" })
                        @Html.ValidationMessageFor(model => model.SupportsMaxLength, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading clearfix">
                <a href="#" data-toggle="collapse" data-target="#ParameterContainer" style="color: black;"><b class="panel-title">Parameters</b></a>
                <div class="btn-group-sm pull-right">
                    <button id="ClearParameters" type="button" class="btn btn-default" title="Clear all of the parameters"><span class="glyphicon glyphicon-remove"></span> Clear</button>
                    <button id="AddParameter"type="button" class="btn btn-default" title="Add a new parameter"><span class="glyphicon glyphicon-plus"></span> Add</button>
                </div>
            </div>
            <div class="panel-body panel-collapse collapse in" id="ParameterContainer">
                <div class="form-group">
                    <div class="col-md-2">@Html.Label("Name", htmlAttributes: new { @class = "control-label" })</div>
                    <div class="col-md-2">@Html.Label("Display Name", htmlAttributes: new { @class = "control-label" })</div>
                    <div class="col-md-2">@Html.Label("Type", htmlAttributes: new { @class = "control-label" })</div>
                    <div class="col-md-2">@Html.Label("Value", htmlAttributes: new { @class = "control-label" })</div>
                    <div class="col-md-3">@Html.Label("Options", htmlAttributes: new { @class = "control-label" }) </div>
                    <div class="col-md-1">&nbsp;</div>
                </div>
                <div id="Parameters" data-item-container>
                    @Html.EditorFor(bg => bg.Parameters)
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $('#Parameters').EnableDisableItemUpDowns();

        $("#Parameters").on("click", "[data-toggle = 'DeleteItem']", function () {
            $(this).parents("[data-item-row]").deleteItem();
        })

        $("#ClearParameters").click(function () {
            $('#Parameters').clearItems("Confirm", "Are you sure you want to clear all parameters?");
        })

        $("#AddParameter").click(function () {
            $("#Parameters").addItem("CreateParameter");
            return false;
        })
        
        $("#Parameters").on("click", "[data-toggle = 'MoveItemUp']", function () {
            var selected = $(this).parents('[data-item-row]');
            selected.moveItemUp();
        })

        $("#Parameters").on("click", "[data-toggle = 'MoveItemDown']", function () {
            var selected = $(this).parents('[data-item-row]');
            selected.moveItemDown();
        })
    })
</script>